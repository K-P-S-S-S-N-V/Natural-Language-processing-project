# -*- coding: utf-8 -*-
"""Task1_English text and sentence to german,french,spanish.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wT9Et37_UQREkXgEn3geRwffni8AYLBK

#Task1
"""

!pip install translate

import numpy as np
import pandas as pd

df=pd.read_csv(r"English.csv",encoding='latin1')
df.head(10)

df['English'] = df['English words/sentences'].str.replace('[?.!]', "")

df.head(10)

df['English'] = [row.lower() for row in df['English']]
df

df=df.drop(columns=['English words/sentences'])

print(df.shape)
df=df.drop_duplicates()
df.shape

df.head(10)

import re

contraction_map={
    "ain't": "is not",
    "aren't": "are not",
    "can't": "cannot",
    "cause": "because",
    "could've": "could have",
    "couldn't": "could not",
    "couldn't've": "could not have",
    "didn't": "did not",
    "doesn't": "does not",
    "don't": "do not",
    "hadn't": "had not",
    "hadn't've": "had not have",
    "hasn't": "has not",
    "haven't": "have not",
    "he'd": "he would",
    "he'd've": "he would have",
    "he'll": "he will",
    "he'll've": "he will have",
    "he's": "he is",
    "how'd": "how did",
    "how'd've": "how did have",
    "how'll": "how will",
    "how's": "how is",
    "I'd": "I would",
    "I'd've": "I would have",
    "I'll": "I will",
    "I'll've": "I will have",
    "I'm": "I am",
    "I've": "I have",
    "i'd": "i would",
    "i'd've": "i would have",
    "i'll": "i will",
    "i'll've": "i will have",
    "i'm": "i am",
    "i've": "i have",
    "isn't": "is not",
    "it'd": "it would",
    "it'd've": "it would have",
    "it'll": "it will",
    "it'll've": "it will have",
    "it's": "it is",
    "let's": "let us",
    "ma'am": "madam",
    "mayn't": "may not",
    "might've": "might have",
    "mightn't": "might not",
    "mightn't've": "might not have",
    "must've": "might have",
    "mustn't": "must not",
    "mustn't've": "must not have",
    "needn't": "need not",
    "needn't've": "need not have",
    "o'clock": "of the clock",
    "oughtn't": "ought not",
    "oughtn't've": "ought not have",
    "shan't": "shall not",
    "shall'n't": "shall not",
    "shan't've": "shall not have",
    "she'd": "she would",
    "she'd've": "she would have",
    "she'll": "she will",
    "she'll've": "she will have",
    "she's": "she is",
    "should've": "should have",
    "shouldn't": "should not",
    "shouldn't've": "should not have",
    "so've": "so have",
    "so's": "so as",
    "that'd": "that would",
    "that'd've": "that would have",
    "that's": "that is",
    "there'd": "there would",
    "there'd've": "there would have",
    "there's": "there is",
    "they'd": "they would",
    "they'd've": "they would have",
    "they'll": "they will",
    "they'll've": "they will have",
    "they're": "they are",
    "they've": "they have",
    "to've": "to have",
    "wasn't": "was not",
    "we'd": "we would",
    "we'd've": "we would have",
    "we'll": "we will",
    "we'll've": "we will have",
    "we're": "we are",
    "weren't": "were not",
    "what'll": "what will",
    "what'll've": "what will have",
    "what're": "what are",
    "what's": "what is",
    "what've": "what have",
    "when's": "when is",
    "when've": "when have",
    "where'd": "where did",
    "where's": "where is",
    "where've": "where have",
    "who'll": "who will",
    "who'll've": "who will have",
    "who's": "who is",
    "who've": "who have",
    "why's": "why is",
    "why've": "why have",
    "will've": "will have",
    "won't": "will not",
    "will't've": "will not have",
    "would've": "would have",
    "would't": "would not",
    "would't've": "would not have",
    "y'all": "you all",
    "y'all'd": "you all would",
    "y'all'd've": "you all would have",
    "y'all're": "you all are",
    "y'all've": "you have all",
    "you'd": "you would",
    "you'd've": "you would have",
    "you'll": "you will",
    "you'll've": "you will have",
    "you're": "you are",
    "you've": "you have",
}
#write a function to expand contractions in the text

def expand_contractions(sent, mapping):
    #pattern for matching contraction with their expansions
    pattern = re.compile('({})'.format('|'.join(mapping.keys())), flags=re.IGNORECASE|re.DOTALL)
    
    def expand_map(contraction):
        #using group method to access subgroups of the match
        match = contraction.group(0)
        #to retain correct case of the word
        first_char = match[0]
        #find out the expansion
        expansion = mapping.get(match) if mapping.get(match) else mapping.get(match.lower())
        expansion = first_char + expansion[1:]
        return expansion
    #using sub method to replace all contractions with their expansions for a sentence
    #function expand_map will be called for every non overlapping occurence of the pattern
    expand_sent = pattern.sub(expand_map, sent)
    return expand_sent
    #test our function its work correct or not:
test = "I've, I'll,didn't, don't"
test_function = expand_contractions(test, contraction_map)
print("Test:   "+ test)
print("Result: "+test_function,"\n\nSuccesfully expanded")

df['English_cleaned']=df['English'].apply(lambda x:expand_contractions(x,contraction_map))
df

df['English_cleaned'] = df['English_cleaned'].str.replace('[\W]', " ") 
df

# Commented out IPython magic to ensure Python compatibility.
# %pip install googletrans==3.1.0a0

import pandas as pd
from googletrans import Translator
translator = Translator()

df_1 =pd.DataFrame(df.iloc[0:2500,:].values, columns = ["English","English_cleaned" ])
df_1["Spanish"] = df_1['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_1["French"] = df_1['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_1["German"] = df_1['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_1.to_csv('Translation1.csv')

df_2 =pd.DataFrame(df.iloc[2500:5000,:].values, columns = ["English","English_cleaned" ])
df_2["Spanish"] = df_2['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_2["French"] = df_2['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_2["German"] = df_2['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_2.to_csv('Translation2.csv')

df_3 =pd.DataFrame(df.iloc[5000:6000,:].values, columns = ["English","English_cleaned" ])
df_3["Spanish"] = df_3['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_3["French"] = df_3['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_3["German"] = df_3['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_3.to_csv('Translation3.csv')

df_4 =pd.DataFrame(df.iloc[6000:7000,:].values, columns = ["English","English_cleaned" ])
df_4["Spanish"] = df_4['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_4["French"] = df_4['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_4["German"] = df_4['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_4.to_csv('Translation4.csv')

df_5 =pd.DataFrame(df.iloc[7000:8000,:].values, columns = ["English","English_cleaned" ])
df_5["Spanish"] = df_5['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_5["French"] = df_5['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_5["German"] = df_5['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_5.to_csv('Translation5.csv')

df_6 =pd.DataFrame(df.iloc[8000:9000,:].values, columns = ["English","English_cleaned" ])
df_6["Spanish"] = df_6['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_6["French"] = df_6['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_6["German"] = df_6['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_6.to_csv('Translation6.csv')

df_7 =pd.DataFrame(df.iloc[9000:10000,:].values, columns = ["English","English_cleaned" ])
df_7["Spanish"] = df_7['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_7["French"] = df_7['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_7["German"] = df_7['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_7.to_csv('Translation7.csv'

df_8 =pd.DataFrame(df.iloc[10000:11000,:].values, columns = ["English","English_cleaned" ])
df_8["Spanish"] = df_8['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_8["French"] = df_8['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_8["German"] = df_8['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_8.to_csv('Translation8.csv')

df_9 =pd.DataFrame(df.iloc[11000:12000,:].values, columns = ["English","English_cleaned" ])
df_9["Spanish"] = df_9['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_9["French"] = df_9['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_9["German"] = df_9['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_9.to_csv('Translation9.csv')

df_10 =pd.DataFrame(df.iloc[12000:13000,:].values, columns = ["English","English_cleaned" ])
df_10["Spanish"] = df_10['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_10["French"] = df_10['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_10["German"] = df_10['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_10.to_csv('Translation10.csv')

df_11 =pd.DataFrame(df.iloc[13000:14000,:].values, columns = ["English","English_cleaned" ])
df_11["Spanish"] = df_11['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_11["French"] = df_11['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_11["German"] = df_11['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_11.to_csv('Translation11.csv')

df_12 =pd.DataFrame(df.iloc[14000:15000,:].values, columns = ["English","English_cleaned" ])
df_12["Spanish"] = df_12['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_12["French"] = df_12['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_12["German"] = df_12['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_12.to_csv('Translation12.csv')

df_13 =pd.DataFrame(df.iloc[15000:16000,:].values, columns = ["English","English_cleaned" ])
df_13["Spanish"] = df_13['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_13["French"] = df_13['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_13["German"] = df_13['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_13.to_csv('Translation13.csv')

df_14 =pd.DataFrame(df.iloc[16000:17000,:].values, columns = ["English","English_cleaned" ])
df_14["Spanish"] = df_14['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_14["French"] = df_14['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_14["German"] = df_14['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_14.to_csv('Translation14.csv')

df_15 =pd.DataFrame(df.iloc[17000:18000,:].values, columns = ["English","English_cleaned" ])
df_15["Spanish"] = df_15['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_15["French"] = df_15['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_15["German"] = df_15['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_15.to_csv('Translation15.csv')

df_16 =pd.DataFrame(df.iloc[18000:19000,:].values, columns = ["English","English_cleaned" ])
df_16["Spanish"] = df_16['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_16["French"] = df_16['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_16["German"] = df_16['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_16.to_csv('Translation16.csv')

df_17 =pd.DataFrame(df.iloc[19000:20000,:].values, columns = ["English","English_cleaned" ])
df_17["Spanish"] = df_17['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_17["French"] = df_17['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_17["German"] = df_17['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_17.to_csv('Translation17.csv')

df_18 =pd.DataFrame(df.iloc[20000:21250,:].values, columns = ["English","English_cleaned" ])
df_18["Spanish"] = df_18['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_18["French"] = df_18['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_18["German"] = df_18['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_18.to_csv('Translation18.csv')

df_19 =pd.DataFrame(df.iloc[21250:22500,:].values, columns = ["English","English_cleaned" ])
df_19["Spanish"] = df_19['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_19["French"] = df_19['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_19["German"] = df_19['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_19.to_csv('Translation19.csv')

df_20 =pd.DataFrame(df.iloc[22500:23750,:].values, columns = ["English","English_cleaned" ])
df_20["Spanish"] = df_20['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_20["French"] = df_20['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_20["German"] = df_20['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_20.to_csv('Translation20.csv')

df_21 =pd.DataFrame(df.iloc[23750:25000,:].values, columns = ["English","English_cleaned" ])
df_21["Spanish"] = df_21['English_cleaned'].apply(translator.translate, src='en', dest='es').apply(getattr, args=('text',))
df_21["French"] = df_21['English_cleaned'].apply(translator.translate, src='en', dest='fr').apply(getattr, args=('text',))
df_21["German"] = df_21['English_cleaned'].apply(translator.translate, src='en', dest='de').apply(getattr, args=('text',))
df_21.to_csv('Translation21.csv')

merger = pd.concat(map(pd.read_csv, ['Transla_1.csv', 'Transla_2.csv','Transla_3.csv','Transla_4.csv','Transla_5.csv','Transla_6.csv','Transla_7.csv','Transla_8.csv','Transla_9.csv','Transla_10.csv','Transla_11.csv','Transla_12.csv','Transla_13.csv','Transla_14.csv','Transla_15.csv','Transla_16.csv','Transla_17.csv','Transla_18.csv','Transla_19.csv','Transla_20.csv','Transla_21.csv',]), ignore_index=True)
merger

merger.columns

merger= merger.drop(columns=['Unnamed: 0'])
merger

